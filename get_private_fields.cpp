/*Подозреваемый. У него крепкая психика и нет очевидных слабостей, показания из него не выбить.*/
struct Cls {
    Cls(char _c, double _d, int _i){};
private:
    char c;
    double d;
    int i;
};
 
/*Брат-близнец подозреваемого. Он знает все о грязных делишках Cls, но сдавать его не спешит, брат все же.*/
struct ClsPubl
{
   /*Суть в том, чтобы подельник был полной копией подозреваемого 
   (только в этом случае поля и методы одного класса будут находится в памяти по тем же смещениям, что и у другого),
   за исключением наличия семьи и детей.*/
    ClsPubl(char _c, double _d, int _i);
public: /*<--- слабое место в психологии преступника - его близкие.*/
    char c;
    double d;
    int i;
};
 
/*Мы - детективы и уже битый час строим из себя "хорошего полицейского", но все бестолку.*/
/*Пришло время поиграть в "плохих полицейских" с братом подозреваемого...*/
 
char &get_c(Cls &cls) {
    void* voidptr = static_cast<void*>(&cls); /*Преобразуем указатель типа Сls* к типу void*. Как бы между делом замечаем поразительное внешнее сходство с непутевым братом.*/
    struct ClsPubl * p = static_cast<ClsPubl*>(voidptr); /*Преобразуем указатель типа void* к типу ClsPubl*, чтобы получить доступ к полям и методам. Далее говорим, что у нас таки есть свидетель, опознавший вашего брата (блеф, но иначе никак)! Но может это были вы? Что будет если вас посадят вместо него за его преступление? Как потом жить вашей семье? Ведь у них все отнимут в качестве компенсации!*/
    return p->c; /*Парень понимает, что у него нет выхода, и сдает брата-преступника. Преступник наказан, у детективов премия и бурный секс дома. Happy end!*/
    /* Прямое преобразование Сls* к ClsPubl* нелегально и компилятор не пропустит (приравнивается к избиению заключенных), поэтому вначале кастуем к void*. */
}